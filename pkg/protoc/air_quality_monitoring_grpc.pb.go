// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: air_quality_monitoring.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AirQualityMonitoring_SendDataToServer_FullMethodName      = "/air_quality_monitoring.AirQualityMonitoring/SendDataToServer"
	AirQualityMonitoring_ReceiveDataFromServer_FullMethodName = "/air_quality_monitoring.AirQualityMonitoring/ReceiveDataFromServer"
	AirQualityMonitoring_CheckConnection_FullMethodName       = "/air_quality_monitoring.AirQualityMonitoring/CheckConnection"
)

// AirQualityMonitoringClient is the client API for AirQualityMonitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualityMonitoringClient interface {
	// A simple RPC to send data to the server
	// and receive an acknowledgment
	SendDataToServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error)
	// A simple RPC to request data from the local storage
	ReceiveDataFromServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error)
	// A simple RPC to send a ping to the service and receive a pong primarily for
	// testing the connection and latency
	CheckConnection(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error)
}

type airQualityMonitoringClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualityMonitoringClient(cc grpc.ClientConnInterface) AirQualityMonitoringClient {
	return &airQualityMonitoringClient{cc}
}

func (c *airQualityMonitoringClient) SendDataToServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, AirQualityMonitoring_SendDataToServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityMonitoringClient) ReceiveDataFromServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, AirQualityMonitoring_ReceiveDataFromServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityMonitoringClient) CheckConnection(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, AirQualityMonitoring_CheckConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirQualityMonitoringServer is the server API for AirQualityMonitoring service.
// All implementations must embed UnimplementedAirQualityMonitoringServer
// for forward compatibility.
type AirQualityMonitoringServer interface {
	// A simple RPC to send data to the server
	// and receive an acknowledgment
	SendDataToServer(context.Context, *Data) (*Ack, error)
	// A simple RPC to request data from the local storage
	ReceiveDataFromServer(context.Context, *Data) (*DataResponse, error)
	// A simple RPC to send a ping to the service and receive a pong primarily for
	// testing the connection and latency
	CheckConnection(context.Context, *Data) (*Ack, error)
	mustEmbedUnimplementedAirQualityMonitoringServer()
}

// UnimplementedAirQualityMonitoringServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAirQualityMonitoringServer struct{}

func (UnimplementedAirQualityMonitoringServer) SendDataToServer(context.Context, *Data) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDataToServer not implemented")
}
func (UnimplementedAirQualityMonitoringServer) ReceiveDataFromServer(context.Context, *Data) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveDataFromServer not implemented")
}
func (UnimplementedAirQualityMonitoringServer) CheckConnection(context.Context, *Data) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}
func (UnimplementedAirQualityMonitoringServer) mustEmbedUnimplementedAirQualityMonitoringServer() {}
func (UnimplementedAirQualityMonitoringServer) testEmbeddedByValue()                              {}

// UnsafeAirQualityMonitoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirQualityMonitoringServer will
// result in compilation errors.
type UnsafeAirQualityMonitoringServer interface {
	mustEmbedUnimplementedAirQualityMonitoringServer()
}

func RegisterAirQualityMonitoringServer(s grpc.ServiceRegistrar, srv AirQualityMonitoringServer) {
	// If the following call pancis, it indicates UnimplementedAirQualityMonitoringServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AirQualityMonitoring_ServiceDesc, srv)
}

func _AirQualityMonitoring_SendDataToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityMonitoringServer).SendDataToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityMonitoring_SendDataToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityMonitoringServer).SendDataToServer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityMonitoring_ReceiveDataFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityMonitoringServer).ReceiveDataFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityMonitoring_ReceiveDataFromServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityMonitoringServer).ReceiveDataFromServer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityMonitoring_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityMonitoringServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirQualityMonitoring_CheckConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityMonitoringServer).CheckConnection(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// AirQualityMonitoring_ServiceDesc is the grpc.ServiceDesc for AirQualityMonitoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirQualityMonitoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "air_quality_monitoring.AirQualityMonitoring",
	HandlerType: (*AirQualityMonitoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDataToServer",
			Handler:    _AirQualityMonitoring_SendDataToServer_Handler,
		},
		{
			MethodName: "ReceiveDataFromServer",
			Handler:    _AirQualityMonitoring_ReceiveDataFromServer_Handler,
		},
		{
			MethodName: "CheckConnection",
			Handler:    _AirQualityMonitoring_CheckConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "air_quality_monitoring.proto",
}
